/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * @param {?} element
 * @param {?} callback
 * @return {?}
 */
export function waitForAnimation(element, callback) {
    if (element === null) {
        return;
    }
    requestAnimationFrame(function () {
        /** @type {?} */
        var computedStyle = window.getComputedStyle(element);
        if (computedStyle.animationName !== 'none' &&
            computedStyle.animationPlayState === 'running') {
            return once(element, 'animationend', callback);
        }
        callback();
    });
}
/**
 * @param {?} element
 * @param {?} eventName
 * @param {?} listener
 * @return {?}
 */
function once(element, eventName, listener) {
    element.addEventListener(eventName, function listenOnce(e) {
        element.removeEventListener(eventName, listenOnce);
        return listener(e);
    });
}
/** @type {?} */
export var closest = typeof Element != 'undefined' && Element.prototype.closest
    ? function (el, s) { return el.closest(s); }
    : function _closest(self, s) {
        /** @type {?} */
        var matches = (((/** @type {?} */ (self))).document || self.ownerDocument).querySelectorAll(s);
        /** @type {?} */
        var i;
        /** @type {?} */
        var el = self;
        do {
            i = matches.length;
            while (--i >= 0 && matches.item(i) !== el) { }
        } while (i < 0 && (el = el.parentElement));
        return el;
    };
/**
 * @param {?} trigger
 * @param {?} dropdown
 * @param {?} __2
 * @return {?}
 */
export function calculatePosition(trigger, dropdown, _a) {
    var horizontalPosition = _a.horizontalPosition, verticalPosition = _a.verticalPosition, matchTriggerWidth = _a.matchTriggerWidth, previousHorizontalPosition = _a.previousHorizontalPosition, previousVerticalPosition = _a.previousVerticalPosition;
    // Collect information about all the involved DOM elements
    /** @type {?} */
    var scroll = { left: window.pageXOffset, top: window.pageYOffset };
    var _b = trigger.getBoundingClientRect(), triggerLeft = _b.left, triggerTop = _b.top, triggerWidth = _b.width, triggerHeight = _b.height;
    var _c = dropdown.getBoundingClientRect(), dropdownHeight = _c.height, dropdownWidth = _c.width;
    /** @type {?} */
    var viewportWidth = window.innerWidth;
    /** @type {?} */
    var style = {};
    // Calculate drop down width
    dropdownWidth = matchTriggerWidth ? triggerWidth : dropdownWidth;
    if (matchTriggerWidth) {
        style.width = dropdownWidth;
    }
    // Calculate horizontal position
    /** @type {?} */
    var triggerLeftWithScroll = triggerLeft + scroll.left;
    if (horizontalPosition === 'auto') {
        // Calculate the number of visible horizontal pixels if we were to place the
        // dropdown on the left and right
        /** @type {?} */
        var leftVisible = Math.min(viewportWidth, triggerLeft + dropdownWidth) -
            Math.max(0, triggerLeft);
        /** @type {?} */
        var rightVisible = Math.min(viewportWidth, triggerLeft + triggerWidth) -
            Math.max(0, triggerLeft + triggerWidth - dropdownWidth);
        if (dropdownWidth > leftVisible && rightVisible > leftVisible) {
            // If the drop down won't fit left-aligned, and there is more space on the
            // right than on the left, then force right-aligned
            horizontalPosition = 'right';
        }
        else if (dropdownWidth > rightVisible && leftVisible > rightVisible) {
            // If the drop down won't fit right-aligned, and there is more space on
            // the left than on the right, then force left-aligned
            horizontalPosition = 'left';
        }
        else {
            // Keep same position as previous
            horizontalPosition = previousHorizontalPosition || 'left';
        }
    }
    if (horizontalPosition === 'right') {
        style.right = viewportWidth - (triggerLeftWithScroll + triggerWidth);
    }
    else if (horizontalPosition === 'center') {
        style.left = triggerLeftWithScroll + (triggerWidth - dropdownWidth) / 2;
    }
    else {
        style.left = triggerLeftWithScroll;
    }
    // Calculate vertical position
    /** @type {?} */
    var triggerTopWithScroll = triggerTop + scroll.top;
    if (verticalPosition === 'above') {
        style.top = triggerTopWithScroll - dropdownHeight;
    }
    else if (verticalPosition === 'below') {
        style.top = triggerTopWithScroll + triggerHeight;
    }
    else {
        /** @type {?} */
        var viewportBottom = scroll.top + self.window.innerHeight;
        /** @type {?} */
        var enoughRoomBelow = triggerTopWithScroll + triggerHeight + dropdownHeight < viewportBottom;
        /** @type {?} */
        var enoughRoomAbove = triggerTop > dropdownHeight;
        if (previousVerticalPosition === 'below' &&
            !enoughRoomBelow &&
            enoughRoomAbove) {
            verticalPosition = 'above';
        }
        else if (previousVerticalPosition === 'above' &&
            !enoughRoomAbove &&
            enoughRoomBelow) {
            verticalPosition = 'below';
        }
        else if (!previousVerticalPosition) {
            verticalPosition = enoughRoomBelow ? 'below' : 'above';
        }
        else {
            verticalPosition = previousVerticalPosition;
        }
        style.top =
            triggerTopWithScroll +
                (verticalPosition === 'below' ? triggerHeight : -dropdownHeight);
    }
    return { horizontalPosition: horizontalPosition, verticalPosition: verticalPosition, style: style };
}
/**
 * @param {?} trigger
 * @param {?} dropdown
 * @param {?} __2
 * @return {?}
 */
export function calculateInPlacePosition(trigger, dropdown, _a) {
    var horizontalPosition = _a.horizontalPosition, verticalPosition = _a.verticalPosition;
    /** @type {?} */
    var dropdownRect;
    /** @type {?} */
    var positionData = {};
    if (horizontalPosition === 'auto') {
        /** @type {?} */
        var triggerRect = trigger.getBoundingClientRect();
        dropdownRect = dropdown.getBoundingClientRect();
        /** @type {?} */
        var viewportRight = window.pageXOffset + window.innerWidth;
        positionData.horizontalPosition =
            triggerRect.left + dropdownRect.width > viewportRight ? 'right' : 'left';
    }
    if (verticalPosition === 'above') {
        positionData.verticalPosition = verticalPosition;
        dropdownRect = dropdownRect || dropdown.getBoundingClientRect();
        positionData.style = { top: -dropdownRect.height };
    }
    return positionData;
}
//# sourceMappingURL=data:application/json;base64,