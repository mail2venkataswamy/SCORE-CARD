/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Inject, forwardRef, Host, HostListener } from '@angular/core';
import { AngularDropdownDirective } from './angular-dropdown.directive';
export class AngularDropdownControlDirective {
    /**
     * @param {?} dropdown
     * @param {?} element
     */
    constructor(dropdown, element) {
        this.dropdown = dropdown;
        this.element = element;
        this.isDropdownOpen = false;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onClick(e) {
        e.stopPropagation();
        if (!this.dropdown.disabled) {
            this.dropdown.toggle();
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.dropdownStateSubscription = this.dropdown.isOpen$.subscribe(isOpen => (this.isDropdownOpen = isOpen));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.dropdownStateSubscription && this.dropdownStateSubscription.unsubscribe();
    }
}
AngularDropdownControlDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ng-dropdown-control],[ngDropdownControl]',
                host: {
                    '[attr.aria-haspopup]': 'true',
                    '[attr.aria-controls]': 'dropdown.id',
                    '[attr.aria-expanded]': 'isDropdownOpen',
                    '[class.ng-dropdown-control]': 'true',
                    '[class.active]': 'isDropdownOpen'
                }
            },] }
];
AngularDropdownControlDirective.ctorParameters = () => [
    { type: AngularDropdownDirective, decorators: [{ type: Host }, { type: Inject, args: [forwardRef(() => AngularDropdownDirective),] }] },
    { type: ElementRef }
];
AngularDropdownControlDirective.propDecorators = {
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    AngularDropdownControlDirective.prototype.isDropdownOpen;
    /** @type {?} */
    AngularDropdownControlDirective.prototype.dropdownStateSubscription;
    /** @type {?} */
    AngularDropdownControlDirective.prototype.dropdown;
    /** @type {?} */
    AngularDropdownControlDirective.prototype.element;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci1kcm9wZG93bi1jb250cm9sLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItZHJvcGRvd24vIiwic291cmNlcyI6WyJsaWIvYW5ndWxhci1kcm9wZG93bi1jb250cm9sLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxVQUFVLEVBQ1YsTUFBTSxFQUNOLFVBQVUsRUFFVixJQUFJLEVBQ0osWUFBWSxFQUNiLE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUM1Qiw4QkFBOEIsQ0FBQztBQWF0QyxNQUFNOzs7OztJQWFKLFlBR1csUUFBa0MsRUFDbEMsT0FBbUI7UUFEbkIsYUFBUSxHQUFSLFFBQVEsQ0FBMEI7UUFDbEMsWUFBTyxHQUFQLE9BQU8sQ0FBWTtRQWhCOUIsbUJBQWMsR0FBWSxLQUFLLENBQUM7SUFpQmhDLENBQUM7Ozs7O0lBYkQsT0FBTyxDQUFDLENBQVE7UUFDZCxDQUFDLENBQUMsZUFBZSxFQUFFLENBQUM7UUFFcEIsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFO1lBQzNCLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUM7U0FDeEI7SUFDSCxDQUFDOzs7O0lBU0QsUUFBUTtRQUNOLElBQUksQ0FBQyx5QkFBeUIsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQzlELE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxHQUFHLE1BQU0sQ0FBQyxDQUN6QyxDQUFDO0lBQ0osQ0FBQzs7OztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMseUJBQXlCLElBQUksSUFBSSxDQUFDLHlCQUF5QixDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ2pGLENBQUM7OztZQXRDRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLDJDQUEyQztnQkFDckQsSUFBSSxFQUFFO29CQUNKLHNCQUFzQixFQUFFLE1BQU07b0JBQzlCLHNCQUFzQixFQUFFLGFBQWE7b0JBQ3JDLHNCQUFzQixFQUFFLGdCQUFnQjtvQkFDeEMsNkJBQTZCLEVBQUUsTUFBTTtvQkFDckMsZ0JBQWdCLEVBQUUsZ0JBQWdCO2lCQUNuQzthQUNGOzs7WUFiUSx3QkFBd0IsdUJBNEIxQixJQUFJLFlBQ0osTUFBTSxTQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyx3QkFBd0IsQ0FBQztZQXJDdEQsVUFBVTs7O3NCQTBCVCxZQUFZLFNBQUMsT0FBTyxFQUFFLENBQUUsUUFBUSxDQUFFOzs7O0lBSG5DLHlEQUFnQzs7SUFDaEMsb0VBQXlDOztJQVlyQyxtREFFeUM7O0lBQ3pDLGtEQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIERpcmVjdGl2ZSxcbiAgRWxlbWVudFJlZixcbiAgSW5qZWN0LFxuICBmb3J3YXJkUmVmLFxuICBJbnB1dCxcbiAgSG9zdCxcbiAgSG9zdExpc3RlbmVyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBBbmd1bGFyRHJvcGRvd25EaXJlY3RpdmUgfVxuICBmcm9tICcuL2FuZ3VsYXItZHJvcGRvd24uZGlyZWN0aXZlJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbbmctZHJvcGRvd24tY29udHJvbF0sW25nRHJvcGRvd25Db250cm9sXScsXG4gIGhvc3Q6IHtcbiAgICAnW2F0dHIuYXJpYS1oYXNwb3B1cF0nOiAndHJ1ZScsXG4gICAgJ1thdHRyLmFyaWEtY29udHJvbHNdJzogJ2Ryb3Bkb3duLmlkJyxcbiAgICAnW2F0dHIuYXJpYS1leHBhbmRlZF0nOiAnaXNEcm9wZG93bk9wZW4nLFxuICAgICdbY2xhc3MubmctZHJvcGRvd24tY29udHJvbF0nOiAndHJ1ZScsXG4gICAgJ1tjbGFzcy5hY3RpdmVdJzogJ2lzRHJvcGRvd25PcGVuJ1xuICB9XG59KVxuZXhwb3J0IGNsYXNzIEFuZ3VsYXJEcm9wZG93bkNvbnRyb2xEaXJlY3RpdmUge1xuICBpc0Ryb3Bkb3duT3BlbjogYm9vbGVhbiA9IGZhbHNlO1xuICBkcm9wZG93blN0YXRlU3Vic2NyaXB0aW9uPzogU3Vic2NyaXB0aW9uO1xuXG4gIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJywgWyAnJGV2ZW50JyBdKVxuICBvbkNsaWNrKGU6IEV2ZW50KTogdm9pZCB7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgIGlmICghdGhpcy5kcm9wZG93bi5kaXNhYmxlZCkge1xuICAgICAgdGhpcy5kcm9wZG93bi50b2dnbGUoKTtcbiAgICB9XG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICAgIEBIb3N0KClcbiAgICAgIEBJbmplY3QoZm9yd2FyZFJlZigoKSA9PiBBbmd1bGFyRHJvcGRvd25EaXJlY3RpdmUpKVxuICAgICAgcHVibGljIGRyb3Bkb3duOiBBbmd1bGFyRHJvcGRvd25EaXJlY3RpdmUsXG4gICAgICBwdWJsaWMgZWxlbWVudDogRWxlbWVudFJlZikge1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5kcm9wZG93blN0YXRlU3Vic2NyaXB0aW9uID0gdGhpcy5kcm9wZG93bi5pc09wZW4kLnN1YnNjcmliZShcbiAgICAgIGlzT3BlbiA9PiAodGhpcy5pc0Ryb3Bkb3duT3BlbiA9IGlzT3BlbilcbiAgICApO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKXtcbiAgICB0aGlzLmRyb3Bkb3duU3RhdGVTdWJzY3JpcHRpb24gJiYgdGhpcy5kcm9wZG93blN0YXRlU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gIH1cbn1cbiJdfQ==