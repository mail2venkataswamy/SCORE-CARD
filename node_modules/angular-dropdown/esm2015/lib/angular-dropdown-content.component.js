/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { Component, Input, Host, Inject, forwardRef, NgZone } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { AngularDropdownDirective } from './angular-dropdown.directive';
import { closest, waitForAnimation } from './utils';
/** @type {?} */
const MutationObserver = ((/** @type {?} */ (window))).MutationObserver;
export class AngularDropdownContentComponent {
    /**
     * @param {?} dropdown
     * @param {?} zone
     * @param {?} document
     */
    constructor(dropdown, zone, document) {
        this.dropdown = dropdown;
        this.zone = zone;
        this.dropdownClass = '';
        this.overlay = false;
        this.hasMoved = false;
        this._animationClass = null;
        this.isTouchDevice = 'ontouchstart' in window;
        this.mutationObserver = null;
        this.destroy$ = new Subject();
        this.transitioningInClass = 'ng-dropdown-content--transitioning-in';
        this.transitionedInClass = 'ng-dropdown-content--transitioned-in';
        this.transitioningOutClass = 'ng-dropdown-content--transitioning-out';
        this.shouldOpen = false;
        this.repositionInZone = () => this.zone.run(() => this.dropdown.reposition());
        this.handleRootMouseDown = (e) => {
            const { target } = (/** @type {?} */ (e));
            if (this.hasMoved ||
                (this.dropdownElement !== null &&
                    this.dropdownElement.contains(target)) ||
                (this.triggerElement !== null && this.triggerElement.contains(target))) {
                this.hasMoved = false;
                return;
            }
            /** @type {?} */
            const closestDropdown = closest(target, 'ng-dropdown-content');
            if (closestDropdown !== null) {
                /** @type {?} */
                const trigger = this.document.querySelector(`[aria-controls=${closestDropdown.getAttribute('id')}]`);
                /** @type {?} */
                const parentDropdown = closest((/** @type {?} */ (trigger)), 'ng-dropdown-content');
                if (parentDropdown !== null &&
                    parentDropdown.getAttribute('id') === this.dropdown.dropdownId) {
                    this.hasMoved = false;
                    return;
                }
            }
            this.dropdown.close(true);
        };
        this.touchStartHandler = (e) => {
            this.document.body.addEventListener('touchmove', this.touchMoveHandler, true);
        };
        this.touchMoveHandler = (e) => {
            this.hasMoved = true;
            this.document.body.removeEventListener('touchmove', this.touchMoveHandler, true);
        };
        this.document = document;
    }
    /**
     * @return {?}
     */
    get dropdownElement() {
        return this.dropdown.dropdownElement;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.dropdown.onOpen
            .pipe(takeUntil(this.destroy$))
            .subscribe(() => (this.shouldOpen = true));
        this.dropdown.onClose
            .pipe(takeUntil(this.destroy$))
            .subscribe(() => this.close());
    }
    /**
     * @param {?} className
     * @return {?}
     */
    set animationClass(className) {
        if (this.dropdownElement !== null) {
            if (this._animationClass && className !== this._animationClass) {
                this.dropdownElement.classList.remove(this._animationClass);
            }
            else if (className) {
                this.dropdownElement.classList.add(className);
            }
        }
        this._animationClass = className;
    }
    /**
     * @return {?}
     */
    get animationClass() {
        return this._animationClass;
    }
    /**
     * @return {?}
     */
    get triggerElement() {
        return this.dropdown.triggerElement;
    }
    /**
     * @return {?}
     */
    ngAfterViewChecked() {
        if (this.shouldOpen) {
            this.animationClass = this.transitioningInClass;
            requestAnimationFrame(() => this.open());
            this.shouldOpen = false;
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroy$.next();
        this.teardownEvents();
    }
    /**
     * @return {?}
     */
    open() {
        this.document.body.addEventListener('mousedown', this.handleRootMouseDown, true);
        if (this.isTouchDevice) {
            this.document.body.addEventListener('touchstart', this.touchStartHandler, true);
            this.document.body.addEventListener('touchend', this.handleRootMouseDown, true);
        }
        /** @type {?} */
        const changes = this.dropdown.reposition();
        if (!this.dropdown.renderInPlace) {
            this.addGlobalEvents();
            this.startObservingDomMutations();
        }
        else if (changes !== null && changes.vPosition === 'above') {
            this.startObservingDomMutations();
        }
        requestAnimationFrame(() => this.animateIn());
    }
    /**
     * @return {?}
     */
    close() {
        this.teardownEvents();
        this.animateOut();
    }
    /**
     * @return {?}
     */
    animateIn() {
        waitForAnimation(this.dropdownElement, () => {
            this.animationClass = this.transitionedInClass;
        });
    }
    /**
     * @return {?}
     */
    animateOut() {
        if (this.dropdownElement === null) {
            return;
        }
        /** @type {?} */
        const parentElement = this.dropdown.renderInPlace
            ? (/** @type {?} */ ((/** @type {?} */ (this.dropdownElement.parentElement)).parentElement))
            : (/** @type {?} */ (this.dropdownElement.parentElement));
        /** @type {?} */
        const clone = (/** @type {?} */ (this.dropdownElement.cloneNode(true)));
        clone.id = `${this.dropdownElement.id}--clone`;
        clone.classList.remove(this.transitionedInClass);
        clone.classList.remove(this.transitioningInClass);
        clone.classList.add(this.transitioningOutClass);
        parentElement.appendChild(clone);
        this.animationClass = this.transitioningInClass;
        waitForAnimation(clone, () => parentElement.removeChild(clone));
    }
    /**
     * @return {?}
     */
    startObservingDomMutations() {
        if (MutationObserver !== undefined) {
            this.mutationObserver = new MutationObserver((mutations) => {
                if (mutations[0].addedNodes.length ||
                    mutations[0].removedNodes.length) {
                    this.repositionInZone();
                }
            });
            (/** @type {?} */ (this.mutationObserver)).observe((/** @type {?} */ (this.dropdownElement)), {
                childList: true,
                subtree: true
            });
        }
        else {
            (/** @type {?} */ (this.dropdownElement)).addEventListener('DOMNodeInserted', this.repositionInZone, false);
            (/** @type {?} */ (this.dropdownElement)).addEventListener('DOMNodeRemoved', this.repositionInZone, false);
        }
    }
    /**
     * @return {?}
     */
    stopObservingDomMutations() {
        if (MutationObserver) {
            if (this.mutationObserver) {
                this.mutationObserver.disconnect();
                this.mutationObserver = null;
            }
        }
        else {
            if (this.dropdownElement !== null) {
                this.dropdownElement.removeEventListener('DOMNodeInserted', this.repositionInZone);
                this.dropdownElement.removeEventListener('DOMNodeRemoved', this.repositionInZone);
            }
        }
    }
    /**
     * @return {?}
     */
    addGlobalEvents() {
        window.addEventListener('scroll', this.repositionInZone);
        window.addEventListener('resize', this.repositionInZone);
        window.addEventListener('orientationchange', this.repositionInZone);
    }
    /**
     * @return {?}
     */
    removeGlobalEvents() {
        window.removeEventListener('scroll', this.repositionInZone);
        window.removeEventListener('resize', this.repositionInZone);
        window.removeEventListener('orientationchange', this.repositionInZone);
    }
    /**
     * @return {?}
     */
    teardownEvents() {
        this.removeGlobalEvents();
        this.stopObservingDomMutations();
        this.document.body.removeEventListener('mousedown', this.handleRootMouseDown, true);
        if (this.isTouchDevice) {
            this.document.body.removeEventListener('touchstart', this.touchStartHandler, true);
            this.document.body.removeEventListener('touchend', this.handleRootMouseDown, true);
        }
    }
}
AngularDropdownContentComponent.decorators = [
    { type: Component, args: [{
                selector: 'ng-dropdown-content,[ng-dropdown-content],[ngDropdownContent]',
                template: "<ng-container *ngIf=\"dropdown.isOpen$ | async as isOpen\">\n  <ng-container *ngWormhole=\"'#ng-dropdown-outlet'; renderInPlace: dropdown.renderInPlace\">\n    <div *ngIf=\"overlay && isOpen\" class=\"ng-dropdown-overlay\"></div>\n    <div [id]=\"dropdown.dropdownId\"\n        class=\"ng-dropdown-content {{dropdownClass}}\"\n        [style.top]=\"(dropdown.position$ | async)?.top\"\n        [style.right]=\"(dropdown.position$ | async)?.right\"\n        [style.bottom]=\"(dropdown.position$ | async)?.bottom\"\n        [style.left]=\"(dropdown.position$ | async)?.left\"\n        [class.render-in-place]=\"dropdown.renderInPlace\"\n        [class.ng-dropdown-content--above]=\"(dropdown.position$ | async)?.vPosition === 'above'\"\n        [class.ng-dropdown-content--below]=\"(dropdown.position$ | async)?.vPosition === 'below'\"\n        [class.ng-dropdown-content--right]=\"(dropdown.position$ | async)?.hPosition === 'right'\"\n        [class.ng-dropdown-content--center]=\"(dropdown.position$ | async)?.hPosition === 'center'\"\n        [class.ng-dropdown-content--left]=\"(dropdown.position$ | async)?.hPosition === 'left'\">\n      <ng-content></ng-content>\n    </div>\n  </ng-container>\n  <div *ngIf=\"!isOpen\" [id]=\"dropdown.dropdownId\" class=\"ng-dropdown-placeholder\"></div>\n</ng-container>\n",
                host: {
                    '[class.render-in-place]': 'dropdown.renderInPlace'
                },
                styles: [":host{display:none}:host.render-in-place{display:block;position:absolute}"]
            }] }
];
AngularDropdownContentComponent.ctorParameters = () => [
    { type: AngularDropdownDirective, decorators: [{ type: Host }, { type: Inject, args: [forwardRef(() => AngularDropdownDirective),] }] },
    { type: NgZone },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
AngularDropdownContentComponent.propDecorators = {
    dropdownClass: [{ type: Input }],
    overlay: [{ type: Input }],
    transitioningInClass: [{ type: Input }],
    transitionedInClass: [{ type: Input }],
    transitioningOutClass: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    AngularDropdownContentComponent.prototype.dropdownClass;
    /** @type {?} */
    AngularDropdownContentComponent.prototype.overlay;
    /** @type {?} */
    AngularDropdownContentComponent.prototype.hasMoved;
    /** @type {?} */
    AngularDropdownContentComponent.prototype._animationClass;
    /** @type {?} */
    AngularDropdownContentComponent.prototype.isTouchDevice;
    /** @type {?} */
    AngularDropdownContentComponent.prototype.mutationObserver;
    /** @type {?} */
    AngularDropdownContentComponent.prototype.destroy$;
    /** @type {?} */
    AngularDropdownContentComponent.prototype.transitioningInClass;
    /** @type {?} */
    AngularDropdownContentComponent.prototype.transitionedInClass;
    /** @type {?} */
    AngularDropdownContentComponent.prototype.transitioningOutClass;
    /** @type {?} */
    AngularDropdownContentComponent.prototype.shouldOpen;
    /** @type {?} */
    AngularDropdownContentComponent.prototype.document;
    /** @type {?} */
    AngularDropdownContentComponent.prototype.repositionInZone;
    /** @type {?} */
    AngularDropdownContentComponent.prototype.handleRootMouseDown;
    /** @type {?} */
    AngularDropdownContentComponent.prototype.touchStartHandler;
    /** @type {?} */
    AngularDropdownContentComponent.prototype.touchMoveHandler;
    /** @type {?} */
    AngularDropdownContentComponent.prototype.dropdown;
    /** @type {?} */
    AngularDropdownContentComponent.prototype.zone;
}
//# sourceMappingURL=data:application/json;base64,