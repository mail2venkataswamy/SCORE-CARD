import { Observable, BehaviorSubject } from 'rxjs';
import { OnChanges, SimpleChanges } from '@angular/core';
import { AngularDropdownControlDirective } from './angular-dropdown-control.directive';
export interface AngularDropdownPositionChanges {
    vPosition: 'above' | 'below';
    hPosition: 'right' | 'center' | 'left';
}
export declare type VerticalPosition = 'auto' | 'above' | 'below';
export declare type HorizontalPosition = 'auto' | 'right' | 'center' | 'left';
export interface DropdownContentPosition {
    readonly hPosition: HorizontalPosition | null;
    readonly vPosition: VerticalPosition | null;
    readonly top: string | null;
    readonly left: string | null;
    readonly bottom: string | null;
    readonly right: string | null;
}
export declare class AngularDropdownDirective implements OnChanges {
    id?: string;
    renderInPlace: boolean;
    control: AngularDropdownControlDirective | null;
    previousVerticalPosition: VerticalPosition | null;
    previousHorizontalPosition: HorizontalPosition | null;
    matchTriggerWidth: boolean;
    private _isOpen$;
    isOpen$: Observable<boolean>;
    position$: BehaviorSubject<Readonly<DropdownContentPosition>>;
    readonly dropdownId: string;
    calculatePosition: Function;
    calculateInPlacePosition: Function;
    disabled: boolean;
    beforeOpen: (() => boolean | Observable<boolean>) | null;
    beforeClose: (() => boolean | Observable<boolean>) | null;
    verticalPosition: VerticalPosition;
    horizontalPosition: HorizontalPosition;
    onOpen: Observable<boolean>;
    onClose: Observable<boolean>;
    readonly triggerElement: HTMLElement | null;
    readonly dropdownElement: HTMLElement | null;
    private dropdownContent?;
    private uniqueId;
    private width;
    private document;
    constructor(document: any, id?: string);
    ngOnChanges({ disabled }: SimpleChanges): void;
    open(): void;
    close(skipFocus?: boolean): void;
    toggle(): void;
    disable(): void;
    enable(): void;
    reposition: () => AngularDropdownPositionChanges | null;
    private applyReposition;
    private initializeId;
    private createDefaultWormholeOutlet;
}
