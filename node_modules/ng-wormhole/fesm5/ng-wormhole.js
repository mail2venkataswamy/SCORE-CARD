import { Directive, Input, ViewContainerRef, TemplateRef, Inject, NgModule } from '@angular/core';
import { DOCUMENT } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * @template T
 * @param {?} target
 * @param {?} node
 * @return {?}
 */
function appendReducer(target, node) {
    target.appendChild(node);
    return target;
}
var NgWormholeDirective = /** @class */ (function () {
    function NgWormholeDirective(viewContainerRef, templateRef, document) {
        this.viewContainerRef = viewContainerRef;
        this.templateRef = templateRef;
        this.ngWormholeRenderInPlace = false;
        this.initialized = false;
        this.document = document;
    }
    Object.defineProperty(NgWormholeDirective.prototype, "destinationElement", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.ngWormholeRenderInPlace) {
                return (this.viewContainerRef.element &&
                    this.viewContainerRef.element.nativeElement);
            }
            if (!this.ngWormhole) {
                return null;
            }
            return typeof this.ngWormhole === 'string'
                ? this.document.querySelector(this.ngWormhole)
                : this.ngWormhole;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NgWormholeDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.embeddedViewRef = this.viewContainerRef.createEmbeddedView(this.templateRef);
    };
    /**
     * @return {?}
     */
    NgWormholeDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.appendToDestination();
        this.initialized = true;
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    NgWormholeDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (this.initialized) {
            this.appendToDestination();
        }
    };
    /**
     * @return {?}
     */
    NgWormholeDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.embeddedViewRef != null) {
            this.embeddedViewRef.destroy();
        }
    };
    /**
     * @return {?}
     */
    NgWormholeDirective.prototype.appendToDestination = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var startingActiveElement = this.getActiveElement();
        /** @type {?} */
        var destinationElement = this.destinationElement;
        if (destinationElement == null) {
            return;
        }
        /** @type {?} */
        var content = this.embeddedViewRef.rootNodes.reduce(appendReducer, this.document.createDocumentFragment());
        if (destinationElement.nodeType === Node.COMMENT_NODE) {
            destinationElement.parentNode.insertBefore(content, destinationElement.nextSibling);
        }
        else {
            destinationElement.appendChild(content);
        }
        /** @type {?} */
        var resultingActiveElement = this.getActiveElement();
        if (startingActiveElement != null &&
            resultingActiveElement !== startingActiveElement) {
            (/** @type {?} */ (startingActiveElement)).focus();
        }
    };
    /**
     * @return {?}
     */
    NgWormholeDirective.prototype.getActiveElement = /**
     * @return {?}
     */
    function () {
        return this.document.activeElement;
    };
    NgWormholeDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[ngWormhole]' // tslint:disable-line
                },] },
    ];
    /** @nocollapse */
    NgWormholeDirective.ctorParameters = function () { return [
        { type: ViewContainerRef },
        { type: TemplateRef },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
    ]; };
    NgWormholeDirective.propDecorators = {
        ngWormholeRenderInPlace: [{ type: Input }],
        ngWormhole: [{ type: Input }]
    };
    return NgWormholeDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var NgWormholeModule = /** @class */ (function () {
    function NgWormholeModule() {
    }
    NgWormholeModule.decorators = [
        { type: NgModule, args: [{
                    imports: [],
                    declarations: [NgWormholeDirective],
                    exports: [NgWormholeDirective]
                },] },
    ];
    return NgWormholeModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { NgWormholeDirective, NgWormholeModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctd29ybWhvbGUuanMubWFwIiwic291cmNlcyI6WyJuZzovL25nLXdvcm1ob2xlL2xpYi9uZy13b3JtaG9sZS5kaXJlY3RpdmUudHMiLCJuZzovL25nLXdvcm1ob2xlL2xpYi9uZy13b3JtaG9sZS5tb2R1bGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRGlyZWN0aXZlLFxuICBJbnB1dCxcbiAgVmlld0NvbnRhaW5lclJlZixcbiAgVGVtcGxhdGVSZWYsXG4gIEVtYmVkZGVkVmlld1JlZixcbiAgQWZ0ZXJWaWV3SW5pdCxcbiAgT25Jbml0LFxuICBPbkNoYW5nZXMsXG4gIFNpbXBsZUNoYW5nZXMsXG4gIEhvc3RCaW5kaW5nLFxuICBJbmplY3QsXG4gIE9uRGVzdHJveVxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuZnVuY3Rpb24gYXBwZW5kUmVkdWNlcjxUIGV4dGVuZHMgTm9kZT4odGFyZ2V0OiBULCBub2RlOiBOb2RlKTogVCB7XG4gIHRhcmdldC5hcHBlbmRDaGlsZChub2RlKTtcblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbbmdXb3JtaG9sZV0nIC8vIHRzbGludDpkaXNhYmxlLWxpbmVcbn0pXG5leHBvcnQgY2xhc3MgTmdXb3JtaG9sZURpcmVjdGl2ZVxuICBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uSW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xuICBASW5wdXQoKVxuICBuZ1dvcm1ob2xlUmVuZGVySW5QbGFjZSA9IGZhbHNlO1xuXG4gIEBJbnB1dCgpXG4gIG5nV29ybWhvbGU6IHN0cmluZyB8IEVsZW1lbnQ7XG5cbiAgcHJpdmF0ZSBlbWJlZGRlZFZpZXdSZWY6IEVtYmVkZGVkVmlld1JlZjxhbnk+O1xuICBwcml2YXRlIGluaXRpYWxpemVkID0gZmFsc2U7XG4gIHByaXZhdGUgZG9jdW1lbnQ6IERvY3VtZW50O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgdmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZixcbiAgICBwcml2YXRlIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+LFxuICAgIEBJbmplY3QoRE9DVU1FTlQpIGRvY3VtZW50OiBhbnlcbiAgKSB7XG4gICAgdGhpcy5kb2N1bWVudCA9IGRvY3VtZW50O1xuICB9XG5cbiAgZ2V0IGRlc3RpbmF0aW9uRWxlbWVudCgpOiBFbGVtZW50IHwgbnVsbCB7XG4gICAgaWYgKHRoaXMubmdXb3JtaG9sZVJlbmRlckluUGxhY2UpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIHRoaXMudmlld0NvbnRhaW5lclJlZi5lbGVtZW50ICYmXG4gICAgICAgIHRoaXMudmlld0NvbnRhaW5lclJlZi5lbGVtZW50Lm5hdGl2ZUVsZW1lbnRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLm5nV29ybWhvbGUpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiB0eXBlb2YgdGhpcy5uZ1dvcm1ob2xlID09PSAnc3RyaW5nJ1xuICAgICAgPyB0aGlzLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5uZ1dvcm1ob2xlKVxuICAgICAgOiB0aGlzLm5nV29ybWhvbGU7XG4gIH1cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLmVtYmVkZGVkVmlld1JlZiA9IHRoaXMudmlld0NvbnRhaW5lclJlZi5jcmVhdGVFbWJlZGRlZFZpZXcoXG4gICAgICB0aGlzLnRlbXBsYXRlUmVmXG4gICAgKTtcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLmFwcGVuZFRvRGVzdGluYXRpb24oKTtcbiAgICB0aGlzLmluaXRpYWxpemVkID0gdHJ1ZTtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5pbml0aWFsaXplZCkge1xuICAgICAgdGhpcy5hcHBlbmRUb0Rlc3RpbmF0aW9uKCk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgaWYgKHRoaXMuZW1iZWRkZWRWaWV3UmVmICE9IG51bGwpIHtcbiAgICAgIHRoaXMuZW1iZWRkZWRWaWV3UmVmLmRlc3Ryb3koKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGFwcGVuZFRvRGVzdGluYXRpb24oKTogdm9pZCB7XG4gICAgbGV0IHN0YXJ0aW5nQWN0aXZlRWxlbWVudCA9IHRoaXMuZ2V0QWN0aXZlRWxlbWVudCgpO1xuICAgIGxldCBkZXN0aW5hdGlvbkVsZW1lbnQgPSB0aGlzLmRlc3RpbmF0aW9uRWxlbWVudDtcblxuICAgIGlmIChkZXN0aW5hdGlvbkVsZW1lbnQgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCBjb250ZW50ID0gdGhpcy5lbWJlZGRlZFZpZXdSZWYucm9vdE5vZGVzLnJlZHVjZShcbiAgICAgIGFwcGVuZFJlZHVjZXIsXG4gICAgICB0aGlzLmRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKVxuICAgICk7XG4gICAgaWYgKGRlc3RpbmF0aW9uRWxlbWVudC5ub2RlVHlwZSA9PT0gTm9kZS5DT01NRU5UX05PREUpIHtcbiAgICAgIGRlc3RpbmF0aW9uRWxlbWVudC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShcbiAgICAgICAgY29udGVudCxcbiAgICAgICAgZGVzdGluYXRpb25FbGVtZW50Lm5leHRTaWJsaW5nXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZXN0aW5hdGlvbkVsZW1lbnQuYXBwZW5kQ2hpbGQoY29udGVudCk7XG4gICAgfVxuXG4gICAgbGV0IHJlc3VsdGluZ0FjdGl2ZUVsZW1lbnQgPSB0aGlzLmdldEFjdGl2ZUVsZW1lbnQoKTtcbiAgICBpZiAoXG4gICAgICBzdGFydGluZ0FjdGl2ZUVsZW1lbnQgIT0gbnVsbCAmJlxuICAgICAgcmVzdWx0aW5nQWN0aXZlRWxlbWVudCAhPT0gc3RhcnRpbmdBY3RpdmVFbGVtZW50XG4gICAgKSB7XG4gICAgICAoc3RhcnRpbmdBY3RpdmVFbGVtZW50IGFzIEhUTUxFbGVtZW50KS5mb2N1cygpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZ2V0QWN0aXZlRWxlbWVudCgpOiBFbGVtZW50IHtcbiAgICByZXR1cm4gdGhpcy5kb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuICB9XG59XG4iLCJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmdXb3JtaG9sZURpcmVjdGl2ZSB9IGZyb20gJy4vbmctd29ybWhvbGUuZGlyZWN0aXZlJztcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW10sXG4gIGRlY2xhcmF0aW9uczogW05nV29ybWhvbGVEaXJlY3RpdmVdLFxuICBleHBvcnRzOiBbTmdXb3JtaG9sZURpcmVjdGl2ZV1cbn0pXG5leHBvcnQgY2xhc3MgTmdXb3JtaG9sZU1vZHVsZSB7fVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7Ozs7O0FBZ0JBLHVCQUF1QyxNQUFTLEVBQUUsSUFBVTtJQUMxRCxNQUFNLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRXpCLE9BQU8sTUFBTSxDQUFDO0NBQ2Y7O0lBaUJDLDZCQUNVLGtCQUNBLGFBQ1UsUUFBYTtRQUZ2QixxQkFBZ0IsR0FBaEIsZ0JBQWdCO1FBQ2hCLGdCQUFXLEdBQVgsV0FBVzt1Q0FYSyxLQUFLOzJCQU1ULEtBQUs7UUFRekIsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7S0FDMUI7SUFFRCxzQkFBSSxtREFBa0I7Ozs7UUFBdEI7WUFDRSxJQUFJLElBQUksQ0FBQyx1QkFBdUIsRUFBRTtnQkFDaEMsUUFDRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTztvQkFDN0IsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FB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