{"version":3,"sources":["ng://ng-wormhole/lib/ng-wormhole.directive.ts","ng://ng-wormhole/lib/ng-wormhole.module.ts"],"names":["appendReducer","target","node","appendChild","NgWormholeDirective","viewContainerRef","templateRef","document","this","Object","defineProperty","prototype","ngWormholeRenderInPlace","element","nativeElement","ngWormhole","querySelector","ngOnInit","embeddedViewRef","createEmbeddedView","ngAfterViewInit","appendToDestination","initialized","ngOnChanges","changes","ngOnDestroy","destroy","startingActiveElement","getActiveElement","destinationElement","content","rootNodes","reduce","createDocumentFragment","nodeType","Node","COMMENT_NODE","parentNode","insertBefore","nextSibling","resultingActiveElement","focus","activeElement","Directive","args","selector","ViewContainerRef","TemplateRef","Inject","DOCUMENT","Input","NgWormholeModule","NgModule","imports","declarations","exports"],"mappings":"+TAgBA,SAAAA,EAAuCC,EAAWC,GAGhD,OAFAD,EAAOE,YAAYD,GAEZD,mBAkBP,SAAAG,EACUC,EACAC,EACUC,GAFVC,KAAAH,iBAAAA,EACAG,KAAAF,YAAAA,gCAXgB,oBAMJ,EAQpBE,KAAKD,SAAWA,SAGlBE,OAAAC,eAAIN,EAAAO,UAAA,qBAAkB,KAAtB,WACE,OAAIH,KAAKI,wBAELJ,KAAKH,iBAAiBQ,SACtBL,KAAKH,iBAAiBQ,QAAQC,cAI7BN,KAAKO,WAIwB,iBAApBP,KAAKO,WACfP,KAAKD,SAASS,cAAcR,KAAKO,YACjCP,KAAKO,WALA,sCAQXX,EAAAO,UAAAM,SAAA,WACET,KAAKU,gBAAkBV,KAAKH,iBAAiBc,mBAC3CX,KAAKF,cAITF,EAAAO,UAAAS,gBAAA,WACEZ,KAAKa,sBACLb,KAAKc,aAAc,GAGrBlB,EAAAO,UAAAY,YAAA,SAAYC,GACNhB,KAAKc,aACPd,KAAKa,uBAITjB,EAAAO,UAAAc,YAAA,WAC8B,MAAxBjB,KAAKU,iBACPV,KAAKU,gBAAgBQ,WAIjBtB,EAAAO,UAAAU,+BACN,IAAIM,EAAwBnB,KAAKoB,mBAC7BC,EAAqBrB,KAAKqB,mBAE9B,GAA0B,MAAtBA,EAAJ,CAIA,IAAIC,EAAUtB,KAAKU,gBAAgBa,UAAUC,OAC3ChC,EACAQ,KAAKD,SAAS0B,0BAEZJ,EAAmBK,WAAaC,KAAKC,aACvCP,EAAmBQ,WAAWC,aAC5BR,EACAD,EAAmBU,aAGrBV,EAAmB1B,YAAY2B,GAGjC,IAAIU,EAAyBhC,KAAKoB,mBAEP,MAAzBD,GACAa,IAA2Bb,GAE3B,EAAuCc,UAInCrC,EAAAO,UAAAiB,4BACN,OAAOpB,KAAKD,SAASmC,mCA9FxBC,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,4DApBVC,EAAAA,wBACAC,EAAAA,+CAoCGC,EAAAA,OAAMJ,KAAA,CAACK,EAAAA,gEAbTC,EAAAA,0BAGAA,EAAAA,cC9BHC,EAAA,oDAGCC,EAAAA,SAAQR,KAAA,CAAC,CACRS,QAAS,GACTC,aAAc,CAAClD,GACfmD,QAAS,CAACnD,SANZ","sourcesContent":["import {\n  Directive,\n  Input,\n  ViewContainerRef,\n  TemplateRef,\n  EmbeddedViewRef,\n  AfterViewInit,\n  OnInit,\n  OnChanges,\n  SimpleChanges,\n  HostBinding,\n  Inject,\n  OnDestroy\n} from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\nfunction appendReducer<T extends Node>(target: T, node: Node): T {\n  target.appendChild(node);\n\n  return target;\n}\n\n@Directive({\n  selector: '[ngWormhole]' // tslint:disable-line\n})\nexport class NgWormholeDirective\n  implements AfterViewInit, OnInit, OnChanges, OnDestroy {\n  @Input()\n  ngWormholeRenderInPlace = false;\n\n  @Input()\n  ngWormhole: string | Element;\n\n  private embeddedViewRef: EmbeddedViewRef<any>;\n  private initialized = false;\n  private document: Document;\n\n  constructor(\n    private viewContainerRef: ViewContainerRef,\n    private templateRef: TemplateRef<any>,\n    @Inject(DOCUMENT) document: any\n  ) {\n    this.document = document;\n  }\n\n  get destinationElement(): Element | null {\n    if (this.ngWormholeRenderInPlace) {\n      return (\n        this.viewContainerRef.element &&\n        this.viewContainerRef.element.nativeElement\n      );\n    }\n\n    if (!this.ngWormhole) {\n      return null;\n    }\n\n    return typeof this.ngWormhole === 'string'\n      ? this.document.querySelector(this.ngWormhole)\n      : this.ngWormhole;\n  }\n\n  ngOnInit(): void {\n    this.embeddedViewRef = this.viewContainerRef.createEmbeddedView(\n      this.templateRef\n    );\n  }\n\n  ngAfterViewInit(): void {\n    this.appendToDestination();\n    this.initialized = true;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (this.initialized) {\n      this.appendToDestination();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.embeddedViewRef != null) {\n      this.embeddedViewRef.destroy();\n    }\n  }\n\n  private appendToDestination(): void {\n    let startingActiveElement = this.getActiveElement();\n    let destinationElement = this.destinationElement;\n\n    if (destinationElement == null) {\n      return;\n    }\n\n    let content = this.embeddedViewRef.rootNodes.reduce(\n      appendReducer,\n      this.document.createDocumentFragment()\n    );\n    if (destinationElement.nodeType === Node.COMMENT_NODE) {\n      destinationElement.parentNode.insertBefore(\n        content,\n        destinationElement.nextSibling\n      );\n    } else {\n      destinationElement.appendChild(content);\n    }\n\n    let resultingActiveElement = this.getActiveElement();\n    if (\n      startingActiveElement != null &&\n      resultingActiveElement !== startingActiveElement\n    ) {\n      (startingActiveElement as HTMLElement).focus();\n    }\n  }\n\n  private getActiveElement(): Element {\n    return this.document.activeElement;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { NgWormholeDirective } from './ng-wormhole.directive';\n\n@NgModule({\n  imports: [],\n  declarations: [NgWormholeDirective],\n  exports: [NgWormholeDirective]\n})\nexport class NgWormholeModule {}\n"]}