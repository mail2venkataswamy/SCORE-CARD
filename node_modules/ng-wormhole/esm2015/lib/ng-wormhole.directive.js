/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Directive, Input, ViewContainerRef, TemplateRef, Inject } from '@angular/core';
import { DOCUMENT } from '@angular/common';
/**
 * @template T
 * @param {?} target
 * @param {?} node
 * @return {?}
 */
function appendReducer(target, node) {
    target.appendChild(node);
    return target;
}
export class NgWormholeDirective {
    /**
     * @param {?} viewContainerRef
     * @param {?} templateRef
     * @param {?} document
     */
    constructor(viewContainerRef, templateRef, document) {
        this.viewContainerRef = viewContainerRef;
        this.templateRef = templateRef;
        this.ngWormholeRenderInPlace = false;
        this.initialized = false;
        this.document = document;
    }
    /**
     * @return {?}
     */
    get destinationElement() {
        if (this.ngWormholeRenderInPlace) {
            return (this.viewContainerRef.element &&
                this.viewContainerRef.element.nativeElement);
        }
        if (!this.ngWormhole) {
            return null;
        }
        return typeof this.ngWormhole === 'string'
            ? this.document.querySelector(this.ngWormhole)
            : this.ngWormhole;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.embeddedViewRef = this.viewContainerRef.createEmbeddedView(this.templateRef);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.appendToDestination();
        this.initialized = true;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (this.initialized) {
            this.appendToDestination();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.embeddedViewRef != null) {
            this.embeddedViewRef.destroy();
        }
    }
    /**
     * @return {?}
     */
    appendToDestination() {
        /** @type {?} */
        let startingActiveElement = this.getActiveElement();
        /** @type {?} */
        let destinationElement = this.destinationElement;
        if (destinationElement == null) {
            return;
        }
        /** @type {?} */
        let content = this.embeddedViewRef.rootNodes.reduce(appendReducer, this.document.createDocumentFragment());
        if (destinationElement.nodeType === Node.COMMENT_NODE) {
            destinationElement.parentNode.insertBefore(content, destinationElement.nextSibling);
        }
        else {
            destinationElement.appendChild(content);
        }
        /** @type {?} */
        let resultingActiveElement = this.getActiveElement();
        if (startingActiveElement != null &&
            resultingActiveElement !== startingActiveElement) {
            (/** @type {?} */ (startingActiveElement)).focus();
        }
    }
    /**
     * @return {?}
     */
    getActiveElement() {
        return this.document.activeElement;
    }
}
NgWormholeDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ngWormhole]' // tslint:disable-line
            },] },
];
/** @nocollapse */
NgWormholeDirective.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: TemplateRef },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
NgWormholeDirective.propDecorators = {
    ngWormholeRenderInPlace: [{ type: Input }],
    ngWormhole: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    NgWormholeDirective.prototype.ngWormholeRenderInPlace;
    /** @type {?} */
    NgWormholeDirective.prototype.ngWormhole;
    /** @type {?} */
    NgWormholeDirective.prototype.embeddedViewRef;
    /** @type {?} */
    NgWormholeDirective.prototype.initialized;
    /** @type {?} */
    NgWormholeDirective.prototype.document;
    /** @type {?} */
    NgWormholeDirective.prototype.viewContainerRef;
    /** @type {?} */
    NgWormholeDirective.prototype.templateRef;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctd29ybWhvbGUuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctd29ybWhvbGUvIiwic291cmNlcyI6WyJsaWIvbmctd29ybWhvbGUuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULEtBQUssRUFDTCxnQkFBZ0IsRUFDaEIsV0FBVyxFQU9YLE1BQU0sRUFFUCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7Ozs7Ozs7QUFFM0MsdUJBQXVDLE1BQVMsRUFBRSxJQUFVO0lBQzFELE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFekIsTUFBTSxDQUFDLE1BQU0sQ0FBQztDQUNmO0FBS0QsTUFBTTs7Ozs7O0lBWUosWUFDVSxrQkFDQSxhQUNVLFFBQWE7UUFGdkIscUJBQWdCLEdBQWhCLGdCQUFnQjtRQUNoQixnQkFBVyxHQUFYLFdBQVc7dUNBWEssS0FBSzsyQkFNVCxLQUFLO1FBUXpCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0tBQzFCOzs7O0lBRUQsSUFBSSxrQkFBa0I7UUFDcEIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLHVCQUF1QixDQUFDLENBQUMsQ0FBQztZQUNqQyxNQUFNLENBQUMsQ0FDTCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTztnQkFDN0IsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQzVDLENBQUM7U0FDSDtRQUVELEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7WUFDckIsTUFBTSxDQUFDLElBQUksQ0FBQztTQUNiO1FBRUQsTUFBTSxDQUFDLE9BQU8sSUFBSSxDQUFDLFVBQVUsS0FBSyxRQUFRO1lBQ3hDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO1lBQzlDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO0tBQ3JCOzs7O0lBRUQsUUFBUTtRQUNOLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGtCQUFrQixDQUM3RCxJQUFJLENBQUMsV0FBVyxDQUNqQixDQUFDO0tBQ0g7Ozs7SUFFRCxlQUFlO1FBQ2IsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUM7UUFDM0IsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7S0FDekI7Ozs7O0lBRUQsV0FBVyxDQUFDLE9BQXNCO1FBQ2hDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO1lBQ3JCLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO1NBQzVCO0tBQ0Y7Ozs7SUFFRCxXQUFXO1FBQ1QsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWUsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ2pDLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxFQUFFLENBQUM7U0FDaEM7S0FDRjs7OztJQUVPLG1CQUFtQjs7UUFDekIsSUFBSSxxQkFBcUIsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQzs7UUFDcEQsSUFBSSxrQkFBa0IsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUM7UUFFakQsRUFBRSxDQUFDLENBQUMsa0JBQWtCLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQztZQUMvQixNQUFNLENBQUM7U0FDUjs7UUFFRCxJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQ2pELGFBQWEsRUFDYixJQUFJLENBQUMsUUFBUSxDQUFDLHNCQUFzQixFQUFFLENBQ3ZDLENBQUM7UUFDRixFQUFFLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLEtBQUssSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7WUFDdEQsa0JBQWtCLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FDeEMsT0FBTyxFQUNQLGtCQUFrQixDQUFDLFdBQVcsQ0FDL0IsQ0FBQztTQUNIO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixrQkFBa0IsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDekM7O1FBRUQsSUFBSSxzQkFBc0IsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUNyRCxFQUFFLENBQUMsQ0FDRCxxQkFBcUIsSUFBSSxJQUFJO1lBQzdCLHNCQUFzQixLQUFLLHFCQUM3QixDQUFDLENBQUMsQ0FBQztZQUNELG1CQUFDLHFCQUFvQyxFQUFDLENBQUMsS0FBSyxFQUFFLENBQUM7U0FDaEQ7Ozs7O0lBR0ssZ0JBQWdCO1FBQ3RCLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQzs7OztZQTlGdEMsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxjQUFjO2FBQ3pCOzs7O1lBckJDLGdCQUFnQjtZQUNoQixXQUFXOzRDQW9DUixNQUFNLFNBQUMsUUFBUTs7O3NDQWJqQixLQUFLO3lCQUdMLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBEaXJlY3RpdmUsXG4gIElucHV0LFxuICBWaWV3Q29udGFpbmVyUmVmLFxuICBUZW1wbGF0ZVJlZixcbiAgRW1iZWRkZWRWaWV3UmVmLFxuICBBZnRlclZpZXdJbml0LFxuICBPbkluaXQsXG4gIE9uQ2hhbmdlcyxcbiAgU2ltcGxlQ2hhbmdlcyxcbiAgSG9zdEJpbmRpbmcsXG4gIEluamVjdCxcbiAgT25EZXN0cm95XG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRE9DVU1FTlQgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5mdW5jdGlvbiBhcHBlbmRSZWR1Y2VyPFQgZXh0ZW5kcyBOb2RlPih0YXJnZXQ6IFQsIG5vZGU6IE5vZGUpOiBUIHtcbiAgdGFyZ2V0LmFwcGVuZENoaWxkKG5vZGUpO1xuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tuZ1dvcm1ob2xlXScgLy8gdHNsaW50OmRpc2FibGUtbGluZVxufSlcbmV4cG9ydCBjbGFzcyBOZ1dvcm1ob2xlRGlyZWN0aXZlXG4gIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25Jbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XG4gIEBJbnB1dCgpXG4gIG5nV29ybWhvbGVSZW5kZXJJblBsYWNlID0gZmFsc2U7XG5cbiAgQElucHV0KClcbiAgbmdXb3JtaG9sZTogc3RyaW5nIHwgRWxlbWVudDtcblxuICBwcml2YXRlIGVtYmVkZGVkVmlld1JlZjogRW1iZWRkZWRWaWV3UmVmPGFueT47XG4gIHByaXZhdGUgaW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgcHJpdmF0ZSBkb2N1bWVudDogRG9jdW1lbnQ7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSB2aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmLFxuICAgIHByaXZhdGUgdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT4sXG4gICAgQEluamVjdChET0NVTUVOVCkgZG9jdW1lbnQ6IGFueVxuICApIHtcbiAgICB0aGlzLmRvY3VtZW50ID0gZG9jdW1lbnQ7XG4gIH1cblxuICBnZXQgZGVzdGluYXRpb25FbGVtZW50KCk6IEVsZW1lbnQgfCBudWxsIHtcbiAgICBpZiAodGhpcy5uZ1dvcm1ob2xlUmVuZGVySW5QbGFjZSkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgdGhpcy52aWV3Q29udGFpbmVyUmVmLmVsZW1lbnQgJiZcbiAgICAgICAgdGhpcy52aWV3Q29udGFpbmVyUmVmLmVsZW1lbnQubmF0aXZlRWxlbWVudFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMubmdXb3JtaG9sZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIHR5cGVvZiB0aGlzLm5nV29ybWhvbGUgPT09ICdzdHJpbmcnXG4gICAgICA/IHRoaXMuZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLm5nV29ybWhvbGUpXG4gICAgICA6IHRoaXMubmdXb3JtaG9sZTtcbiAgfVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIHRoaXMuZW1iZWRkZWRWaWV3UmVmID0gdGhpcy52aWV3Q29udGFpbmVyUmVmLmNyZWF0ZUVtYmVkZGVkVmlldyhcbiAgICAgIHRoaXMudGVtcGxhdGVSZWZcbiAgICApO1xuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xuICAgIHRoaXMuYXBwZW5kVG9EZXN0aW5hdGlvbigpO1xuICAgIHRoaXMuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xuICAgIGlmICh0aGlzLmluaXRpYWxpemVkKSB7XG4gICAgICB0aGlzLmFwcGVuZFRvRGVzdGluYXRpb24oKTtcbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICBpZiAodGhpcy5lbWJlZGRlZFZpZXdSZWYgIT0gbnVsbCkge1xuICAgICAgdGhpcy5lbWJlZGRlZFZpZXdSZWYuZGVzdHJveSgpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYXBwZW5kVG9EZXN0aW5hdGlvbigpOiB2b2lkIHtcbiAgICBsZXQgc3RhcnRpbmdBY3RpdmVFbGVtZW50ID0gdGhpcy5nZXRBY3RpdmVFbGVtZW50KCk7XG4gICAgbGV0IGRlc3RpbmF0aW9uRWxlbWVudCA9IHRoaXMuZGVzdGluYXRpb25FbGVtZW50O1xuXG4gICAgaWYgKGRlc3RpbmF0aW9uRWxlbWVudCA9PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IGNvbnRlbnQgPSB0aGlzLmVtYmVkZGVkVmlld1JlZi5yb290Tm9kZXMucmVkdWNlKFxuICAgICAgYXBwZW5kUmVkdWNlcixcbiAgICAgIHRoaXMuZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpXG4gICAgKTtcbiAgICBpZiAoZGVzdGluYXRpb25FbGVtZW50Lm5vZGVUeXBlID09PSBOb2RlLkNPTU1FTlRfTk9ERSkge1xuICAgICAgZGVzdGluYXRpb25FbGVtZW50LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKFxuICAgICAgICBjb250ZW50LFxuICAgICAgICBkZXN0aW5hdGlvbkVsZW1lbnQubmV4dFNpYmxpbmdcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlc3RpbmF0aW9uRWxlbWVudC5hcHBlbmRDaGlsZChjb250ZW50KTtcbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0aW5nQWN0aXZlRWxlbWVudCA9IHRoaXMuZ2V0QWN0aXZlRWxlbWVudCgpO1xuICAgIGlmIChcbiAgICAgIHN0YXJ0aW5nQWN0aXZlRWxlbWVudCAhPSBudWxsICYmXG4gICAgICByZXN1bHRpbmdBY3RpdmVFbGVtZW50ICE9PSBzdGFydGluZ0FjdGl2ZUVsZW1lbnRcbiAgICApIHtcbiAgICAgIChzdGFydGluZ0FjdGl2ZUVsZW1lbnQgYXMgSFRNTEVsZW1lbnQpLmZvY3VzKCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBnZXRBY3RpdmVFbGVtZW50KCk6IEVsZW1lbnQge1xuICAgIHJldHVybiB0aGlzLmRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG4gIH1cbn1cbiJdfQ==