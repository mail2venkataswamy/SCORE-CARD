/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Directive, Input, ViewContainerRef, TemplateRef, Inject } from '@angular/core';
import { DOCUMENT } from '@angular/common';
/**
 * @template T
 * @param {?} target
 * @param {?} node
 * @return {?}
 */
function appendReducer(target, node) {
    target.appendChild(node);
    return target;
}
var NgWormholeDirective = /** @class */ (function () {
    function NgWormholeDirective(viewContainerRef, templateRef, document) {
        this.viewContainerRef = viewContainerRef;
        this.templateRef = templateRef;
        this.ngWormholeRenderInPlace = false;
        this.initialized = false;
        this.document = document;
    }
    Object.defineProperty(NgWormholeDirective.prototype, "destinationElement", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.ngWormholeRenderInPlace) {
                return (this.viewContainerRef.element &&
                    this.viewContainerRef.element.nativeElement);
            }
            if (!this.ngWormhole) {
                return null;
            }
            return typeof this.ngWormhole === 'string'
                ? this.document.querySelector(this.ngWormhole)
                : this.ngWormhole;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NgWormholeDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.embeddedViewRef = this.viewContainerRef.createEmbeddedView(this.templateRef);
    };
    /**
     * @return {?}
     */
    NgWormholeDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.appendToDestination();
        this.initialized = true;
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    NgWormholeDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (this.initialized) {
            this.appendToDestination();
        }
    };
    /**
     * @return {?}
     */
    NgWormholeDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.embeddedViewRef != null) {
            this.embeddedViewRef.destroy();
        }
    };
    /**
     * @return {?}
     */
    NgWormholeDirective.prototype.appendToDestination = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var startingActiveElement = this.getActiveElement();
        /** @type {?} */
        var destinationElement = this.destinationElement;
        if (destinationElement == null) {
            return;
        }
        /** @type {?} */
        var content = this.embeddedViewRef.rootNodes.reduce(appendReducer, this.document.createDocumentFragment());
        if (destinationElement.nodeType === Node.COMMENT_NODE) {
            destinationElement.parentNode.insertBefore(content, destinationElement.nextSibling);
        }
        else {
            destinationElement.appendChild(content);
        }
        /** @type {?} */
        var resultingActiveElement = this.getActiveElement();
        if (startingActiveElement != null &&
            resultingActiveElement !== startingActiveElement) {
            (/** @type {?} */ (startingActiveElement)).focus();
        }
    };
    /**
     * @return {?}
     */
    NgWormholeDirective.prototype.getActiveElement = /**
     * @return {?}
     */
    function () {
        return this.document.activeElement;
    };
    NgWormholeDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[ngWormhole]' // tslint:disable-line
                },] },
    ];
    /** @nocollapse */
    NgWormholeDirective.ctorParameters = function () { return [
        { type: ViewContainerRef },
        { type: TemplateRef },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
    ]; };
    NgWormholeDirective.propDecorators = {
        ngWormholeRenderInPlace: [{ type: Input }],
        ngWormhole: [{ type: Input }]
    };
    return NgWormholeDirective;
}());
export { NgWormholeDirective };
if (false) {
    /** @type {?} */
    NgWormholeDirective.prototype.ngWormholeRenderInPlace;
    /** @type {?} */
    NgWormholeDirective.prototype.ngWormhole;
    /** @type {?} */
    NgWormholeDirective.prototype.embeddedViewRef;
    /** @type {?} */
    NgWormholeDirective.prototype.initialized;
    /** @type {?} */
    NgWormholeDirective.prototype.document;
    /** @type {?} */
    NgWormholeDirective.prototype.viewContainerRef;
    /** @type {?} */
    NgWormholeDirective.prototype.templateRef;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctd29ybWhvbGUuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctd29ybWhvbGUvIiwic291cmNlcyI6WyJsaWIvbmctd29ybWhvbGUuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULEtBQUssRUFDTCxnQkFBZ0IsRUFDaEIsV0FBVyxFQU9YLE1BQU0sRUFFUCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7Ozs7Ozs7QUFFM0MsdUJBQXVDLE1BQVMsRUFBRSxJQUFVO0lBQzFELE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFekIsTUFBTSxDQUFDLE1BQU0sQ0FBQztDQUNmOztJQWlCQyw2QkFDVSxrQkFDQSxhQUNVLFFBQWE7UUFGdkIscUJBQWdCLEdBQWhCLGdCQUFnQjtRQUNoQixnQkFBVyxHQUFYLFdBQVc7dUNBWEssS0FBSzsyQkFNVCxLQUFLO1FBUXpCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0tBQzFCO0lBRUQsc0JBQUksbURBQWtCOzs7O1FBQXRCO1lBQ0UsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLHVCQUF1QixDQUFDLENBQUMsQ0FBQztnQkFDakMsTUFBTSxDQUFDLENBQ0wsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU87b0JBQzdCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUM1QyxDQUFDO2FBQ0g7WUFFRCxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO2dCQUNyQixNQUFNLENBQUMsSUFBSSxDQUFDO2FBQ2I7WUFFRCxNQUFNLENBQUMsT0FBTyxJQUFJLENBQUMsVUFBVSxLQUFLLFFBQVE7Z0JBQ3hDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO2dCQUM5QyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQztTQUNyQjs7O09BQUE7Ozs7SUFFRCxzQ0FBUTs7O0lBQVI7UUFDRSxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxrQkFBa0IsQ0FDN0QsSUFBSSxDQUFDLFdBQVcsQ0FDakIsQ0FBQztLQUNIOzs7O0lBRUQsNkNBQWU7OztJQUFmO1FBQ0UsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUM7UUFDM0IsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7S0FDekI7Ozs7O0lBRUQseUNBQVc7Ozs7SUFBWCxVQUFZLE9BQXNCO1FBQ2hDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO1lBQ3JCLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO1NBQzVCO0tBQ0Y7Ozs7SUFFRCx5Q0FBVzs7O0lBQVg7UUFDRSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsZUFBZSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDakMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztTQUNoQztLQUNGOzs7O0lBRU8saURBQW1COzs7OztRQUN6QixJQUFJLHFCQUFxQixHQUFHLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDOztRQUNwRCxJQUFJLGtCQUFrQixHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQztRQUVqRCxFQUFFLENBQUMsQ0FBQyxrQkFBa0IsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQy9CLE1BQU0sQ0FBQztTQUNSOztRQUVELElBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FDakQsYUFBYSxFQUNiLElBQUksQ0FBQyxRQUFRLENBQUMsc0JBQXNCLEVBQUUsQ0FDdkMsQ0FBQztRQUNGLEVBQUUsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLFFBQVEsS0FBSyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztZQUN0RCxrQkFBa0IsQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUN4QyxPQUFPLEVBQ1Asa0JBQWtCLENBQUMsV0FBVyxDQUMvQixDQUFDO1NBQ0g7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNOLGtCQUFrQixDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUN6Qzs7UUFFRCxJQUFJLHNCQUFzQixHQUFHLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBQ3JELEVBQUUsQ0FBQyxDQUNELHFCQUFxQixJQUFJLElBQUk7WUFDN0Isc0JBQXNCLEtBQUsscUJBQzdCLENBQUMsQ0FBQyxDQUFDO1lBQ0QsbUJBQUMscUJBQW9DLEVBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztTQUNoRDs7Ozs7SUFHSyw4Q0FBZ0I7Ozs7UUFDdEIsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDOzs7Z0JBOUZ0QyxTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLGNBQWM7aUJBQ3pCOzs7O2dCQXJCQyxnQkFBZ0I7Z0JBQ2hCLFdBQVc7Z0RBb0NSLE1BQU0sU0FBQyxRQUFROzs7MENBYmpCLEtBQUs7NkJBR0wsS0FBSzs7OEJBOUJSOztTQXlCYSxtQkFBbUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBEaXJlY3RpdmUsXG4gIElucHV0LFxuICBWaWV3Q29udGFpbmVyUmVmLFxuICBUZW1wbGF0ZVJlZixcbiAgRW1iZWRkZWRWaWV3UmVmLFxuICBBZnRlclZpZXdJbml0LFxuICBPbkluaXQsXG4gIE9uQ2hhbmdlcyxcbiAgU2ltcGxlQ2hhbmdlcyxcbiAgSG9zdEJpbmRpbmcsXG4gIEluamVjdCxcbiAgT25EZXN0cm95XG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRE9DVU1FTlQgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5mdW5jdGlvbiBhcHBlbmRSZWR1Y2VyPFQgZXh0ZW5kcyBOb2RlPih0YXJnZXQ6IFQsIG5vZGU6IE5vZGUpOiBUIHtcbiAgdGFyZ2V0LmFwcGVuZENoaWxkKG5vZGUpO1xuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tuZ1dvcm1ob2xlXScgLy8gdHNsaW50OmRpc2FibGUtbGluZVxufSlcbmV4cG9ydCBjbGFzcyBOZ1dvcm1ob2xlRGlyZWN0aXZlXG4gIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25Jbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XG4gIEBJbnB1dCgpXG4gIG5nV29ybWhvbGVSZW5kZXJJblBsYWNlID0gZmFsc2U7XG5cbiAgQElucHV0KClcbiAgbmdXb3JtaG9sZTogc3RyaW5nIHwgRWxlbWVudDtcblxuICBwcml2YXRlIGVtYmVkZGVkVmlld1JlZjogRW1iZWRkZWRWaWV3UmVmPGFueT47XG4gIHByaXZhdGUgaW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgcHJpdmF0ZSBkb2N1bWVudDogRG9jdW1lbnQ7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSB2aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmLFxuICAgIHByaXZhdGUgdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT4sXG4gICAgQEluamVjdChET0NVTUVOVCkgZG9jdW1lbnQ6IGFueVxuICApIHtcbiAgICB0aGlzLmRvY3VtZW50ID0gZG9jdW1lbnQ7XG4gIH1cblxuICBnZXQgZGVzdGluYXRpb25FbGVtZW50KCk6IEVsZW1lbnQgfCBudWxsIHtcbiAgICBpZiAodGhpcy5uZ1dvcm1ob2xlUmVuZGVySW5QbGFjZSkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgdGhpcy52aWV3Q29udGFpbmVyUmVmLmVsZW1lbnQgJiZcbiAgICAgICAgdGhpcy52aWV3Q29udGFpbmVyUmVmLmVsZW1lbnQubmF0aXZlRWxlbWVudFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMubmdXb3JtaG9sZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIHR5cGVvZiB0aGlzLm5nV29ybWhvbGUgPT09ICdzdHJpbmcnXG4gICAgICA/IHRoaXMuZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLm5nV29ybWhvbGUpXG4gICAgICA6IHRoaXMubmdXb3JtaG9sZTtcbiAgfVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIHRoaXMuZW1iZWRkZWRWaWV3UmVmID0gdGhpcy52aWV3Q29udGFpbmVyUmVmLmNyZWF0ZUVtYmVkZGVkVmlldyhcbiAgICAgIHRoaXMudGVtcGxhdGVSZWZcbiAgICApO1xuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xuICAgIHRoaXMuYXBwZW5kVG9EZXN0aW5hdGlvbigpO1xuICAgIHRoaXMuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xuICAgIGlmICh0aGlzLmluaXRpYWxpemVkKSB7XG4gICAgICB0aGlzLmFwcGVuZFRvRGVzdGluYXRpb24oKTtcbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICBpZiAodGhpcy5lbWJlZGRlZFZpZXdSZWYgIT0gbnVsbCkge1xuICAgICAgdGhpcy5lbWJlZGRlZFZpZXdSZWYuZGVzdHJveSgpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYXBwZW5kVG9EZXN0aW5hdGlvbigpOiB2b2lkIHtcbiAgICBsZXQgc3RhcnRpbmdBY3RpdmVFbGVtZW50ID0gdGhpcy5nZXRBY3RpdmVFbGVtZW50KCk7XG4gICAgbGV0IGRlc3RpbmF0aW9uRWxlbWVudCA9IHRoaXMuZGVzdGluYXRpb25FbGVtZW50O1xuXG4gICAgaWYgKGRlc3RpbmF0aW9uRWxlbWVudCA9PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IGNvbnRlbnQgPSB0aGlzLmVtYmVkZGVkVmlld1JlZi5yb290Tm9kZXMucmVkdWNlKFxuICAgICAgYXBwZW5kUmVkdWNlcixcbiAgICAgIHRoaXMuZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpXG4gICAgKTtcbiAgICBpZiAoZGVzdGluYXRpb25FbGVtZW50Lm5vZGVUeXBlID09PSBOb2RlLkNPTU1FTlRfTk9ERSkge1xuICAgICAgZGVzdGluYXRpb25FbGVtZW50LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKFxuICAgICAgICBjb250ZW50LFxuICAgICAgICBkZXN0aW5hdGlvbkVsZW1lbnQubmV4dFNpYmxpbmdcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlc3RpbmF0aW9uRWxlbWVudC5hcHBlbmRDaGlsZChjb250ZW50KTtcbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0aW5nQWN0aXZlRWxlbWVudCA9IHRoaXMuZ2V0QWN0aXZlRWxlbWVudCgpO1xuICAgIGlmIChcbiAgICAgIHN0YXJ0aW5nQWN0aXZlRWxlbWVudCAhPSBudWxsICYmXG4gICAgICByZXN1bHRpbmdBY3RpdmVFbGVtZW50ICE9PSBzdGFydGluZ0FjdGl2ZUVsZW1lbnRcbiAgICApIHtcbiAgICAgIChzdGFydGluZ0FjdGl2ZUVsZW1lbnQgYXMgSFRNTEVsZW1lbnQpLmZvY3VzKCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBnZXRBY3RpdmVFbGVtZW50KCk6IEVsZW1lbnQge1xuICAgIHJldHVybiB0aGlzLmRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG4gIH1cbn1cbiJdfQ==